#2nd Jenkins SG for opening http/https only to GITHUB WEBHOOKS. 
  #Gets automatically configured with lambda Function 
  #This portion of template adapted from https://github.com/sys0dm1n/lambda-github-ip-security-group-update
  EC2JenkinsGitHubSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: SOMENAME
      VpcId: !Ref vpcid 
      GroupDescription: http, and https
  #Lambda execution role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: lambda_modify_security_group 
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 0
              Effect: Allow
              Action:
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
              #Restrict SG config actions to created EC2JenkinsGitHubSG only. Must be in arn format. 
              Resource: 
                Fn::Sub:
                  - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${GITHUBSG}
                  - GITHUBSG: !Ref EC2JenkinsGitHubSG 
            - Sid: 1
              Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - ec2:DescribeSecurityGroups
              Resource: "*"   

  LambdaFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          INGRESS_PORTS_LIST : 80,443
          EGRESS_PORTS_LIST : 22,80,443 
          SECURITY_GROUP_ID : !Ref EC2JenkinsGitHubSG 
      Runtime: python3.7
      Timeout: 8  
      Code:
        ZipFile: |
          import os
          import boto3
          import botocore.vendored.requests as requests
          def get_github_ip_list():
              """
              Call the GitHub API to fetch their server IPs used for webhooks
              :rtype: list
              :return: List of IPs
              """
              response = requests.get('https://api.github.com/meta')
              ips = response.json()
              if 'hooks' in ips:
                  return ips['hooks']
              raise ConnectionError("Error loading IPs from GitHub")
          def get_aws_security_group(group_id):
              """
              Return the defined Security Group
              :param group_id:
              :type group_id: str
              :return:
              """
              ec2 = boto3.resource('ec2')
              group = ec2.SecurityGroup(group_id)
              if group.group_id == group_id:
                  return group
              raise ConnectionError('Failed to retrieve security group from Amazon')
          def check_rule_exists(rules, address, port):
              """
              Check if the rule currently exists
              :param rules:
              :param address:
              :param port:
              :return:
              """
              for rule in rules:
                  for ip_range in rule['IpRanges']:
                      if ip_range['CidrIp'] == address and rule['FromPort'] == port:
                          return True
              return False
          def add_ingress_rule(group, address, port, description):
              """
              Add the IP address and port to the security group
              :param group:
              :param address:
              :param port:
              :param description:
              :return:
              """
              permissions = [
                  {
                      'IpProtocol': 'tcp',
                      'FromPort': port,
                      'ToPort': port,
                      'IpRanges': [
                          {
                              'CidrIp': address,
                              'Description': description,
                          }
                      ],
                  }
              ]
              group.authorize_ingress(IpPermissions=permissions)
              print(("Ingress rule from IP %s to Port %i has been added" % (address, port)))
          def add_egress_rule(group, address, port, description):
              """
              Add the IP address and port to the security group
              :param group:
              :param address:
              :param port:
              :param description:
              :return:
              """
              permissions = [
                  {
                      'IpProtocol': 'tcp',
                      'FromPort': port,
                      'ToPort': port,
                      'IpRanges': [
                          {
                              'CidrIp': address,
                              'Description': description,
                          }
                      ],
                  }
              ]
              group.authorize_egress(IpPermissions=permissions)
              print(("Egress rule to IP %s from Port %i has been added" % (address, port)))
          def lambda_handler(event, context):
              """
              AWS lambda main func
              :param event:
              :param context:
              :return:
              """
              ingress_ports = [int(port) for port in os.environ['INGRESS_PORTS_LIST'].split(",")]
              if not ingress_ports:
                  ingress_ports = [80]
              egress_ports = [int(port) for port in os.environ['EGRESS_PORTS_LIST'].split(",")]
              if not egress_ports:
                  egress_ports = [22]
              security_group = get_aws_security_group(os.environ['SECURITY_GROUP_ID'])
              current_ingress_rules = security_group.ip_permissions
              current_egress_rules = security_group.ip_permissions_egress
              ip_addresses = get_github_ip_list()
              description = "GitHub"
              for ip_address in ip_addresses:
                  for port in ingress_ports:
                      if not check_rule_exists(current_ingress_rules, ip_address, port):
                          add_ingress_rule(security_group, ip_address, port, description)
                  for port in egress_ports:
                      if not check_rule_exists(current_egress_rules, ip_address, port):
                          add_egress_rule(security_group, ip_address, port, description) 
  
  ScheduleRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: 'Github IP schedule rule'
      ScheduleExpression: 'rate(1 minute)'
      State: "ENABLED"
      Targets: 
        - 
          Arn:
            Fn::GetAtt:
              - "LambdaFunction"
              - "Arn"
          Id: 
            !Ref   LambdaFunction
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduleRule"
          - "Arn"
  
  EC2Jenkins:    
    Type: 'AWS::EC2::Instance'    
    Properties:      
      InstanceType: !Ref InstanceType
      SubnetId: !Ref Subnet     
      ImageId: !Ref AMI
      SecurityGroupIds:
        - !Ref EC2JenkinsSSHGUISG
        - !Ref EC2JenkinsGitHubSG

      Tags:        
        - Key: Name
          Value: sometag
